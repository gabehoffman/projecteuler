import Foundation

/* Problem 12 -- 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

var searchCount = 25
var startingNumber = 10_000

var triangleNumbers = searchCount.triangleNumbers(startingNumber)

// Trying to guess a good starting number
//print(triangleNumbers.map( { $0.factorCount() } ) )

var count = 0
var currentNumber = startingNumber - 1
var currentTriangle = currentNumber.triangleNumber()
repeat {
    currentNumber++
    currentTriangle = currentNumber.triangleNumber()
    count = currentTriangle.factorCount()
    print("Checking \(currentNumber): has \(count) Factors when triangled to \(currentTriangle)")
} while (count <= 500)

currentNumber
currentTriangle.factorCount()
